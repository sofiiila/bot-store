name: CI Pipeline

on: [push]

jobs:
  mypy-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy
    - name: Type check the code with mypy
      run: mypy $(git ls-files '*.py')

  pylint-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analyse the code with pylint
      run: pylint $(git ls-files '*.py')

  test:
    runs-on: ubuntu-latest
    needs: [mypy-check, pylint-check]
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests
      env:
        TOKEN: ${{ secrets.TOKEN }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        EXTERNAL_DB_PORT: ${{ secrets.EXTERNAL_DB_PORT }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_CONTAINER_NAME: ${{ secrets.DB_CONTAINER_NAME }}
        EXTERNAL_BOT_PORT: ${{ secrets.EXTERNAL_BOT_PORT }}
        BOT_PORT: ${{ secrets.BOT_PORT }}
        BASE_URL: ${{ secrets.BASE_URL }}
        TIMEOUT: ${{ secrets.TIMEOUT }}
      run: python -m unittest discover -s src/

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test]
    if: startsWith(github.ref_name, 'releases/')
    env:
      IMAGE_TAG: ${{ github.ref_name }}
    steps:
    - uses: actions/checkout@v4
    - name: Extract version number from branch
      id: extract_version
      run: echo "VERSION=${IMAGE_TAG#releases/}" >> $GITHUB_ENV
    - name: Log in to Docker Hub
      uses: docker/login-action@v2 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build the Docker image
      run: docker build -t akchaau/bot-store:${{ env.VERSION }} .
    - name: Push the Docker image
      run: docker push akchaau/bot-store:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref_name, 'releases/')
    needs: [build-and-push]
    steps:
      - uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Execute remote command
        env:
          DEPLOY_IP: ${{ secrets.DEPLOY_IP }}
          BASE_URL: ${{ secrets.BASE_URL }}
          BOT_PORT: ${{ secrets.BOT_PORT }}
          DB_CONTAINER_NAME: ${{ secrets.DB_CONTAINER_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD}}
          DB_PORT: ${{ secrets.DB_PORT}}
          DB_USER: ${{ secrets.DB_USER}}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME}}
          EXTERNAL_BOT_PORT: ${{ secrets.EXTERNAL_BOT_PORT}}
          EXTERNAL_DB_PORT: ${{ secrets.EXTERNAL_DB_PORT}
          TIMEOUT: ${{ secrets.TIMEOUT}
          TOKEN: ${{ secrets.TOKEN}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          echo "[DEPLOY_IP]" >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$DEPLOY_IP << 'EOF'
          cd bot-store/
          echo "BASE_URL=$BASE_URL" >> .env
          echo "BOT_PORT=$BOT_PORT" >> .env
          echo "DB_CONTAINER_NAME=$DB_CONTAINER_NAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_USER=$DB_USER" >> .env
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> .env
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> .env
          echo "EXTERNAL_BOT_PORT=$EXTERNAL_BOT_PORT" >> .env
          echo "EXTERNAL_DB_PORT=$EXTERNAL_DB_PORT" >> .env
          echo "TIMEOUT=$TIMEOUT" >> .env
          echo "TOKEN=$TOKEN" >> .env
          git pull
          docker-compose up --build -d
          EOF